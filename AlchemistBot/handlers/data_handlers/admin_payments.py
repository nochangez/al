# coding=utf-8


from datetime import datetime
from os import remove, listdir

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from services.help.additions import *
from services.help.decorators import *
from keyboards.reply_keyboards.menu import *
from keyboards.inline_keyboards.admin import *
from data.config import path_to_config_files, bot
from keyboards.reply_keyboards.back_admin import *
from services.help.write_report import write_in_file
from services.project.payments_controller import PaymentsController


payments_controller = PaymentsController()


class GetPaymentsDateState(StatesGroup):
    waiting_for_date = State()


class GetPaymentPeriodState(StatesGroup):
    waiting_for_period = State()


async def get_payments(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—É–∑–∫–∞...")
    await message.edit_text("<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π</b>")

    payments = await payments_controller.get_payments()

    if len(payments) != 0:
        loading_start = await message.answer("<b>–ù–∞—á–∞–ª–∞—Å—å –≤—ã–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...</b>")

        payments_report_start_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        remove(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏.txt") \
            if "–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏.txt" in listdir(f"{path_to_config_files}") else None

        payments_report_file = open(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏.txt", 'w+', encoding='utf-8')
        payments_report_file.close()

        total_money = 0.0

        for payment in payments:
            payment_id = payment[0]
            customer_id = payment[1]
            payment_value = float(payment[2])
            payment_date = payment[3].strftime("%d.%m.%Y %H:%M:%S")

            total_money += payment_value

            with open(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏.txt", 'a+', encoding='utf-8') as payments_report_file:
                payment_report_message = f"id –ü–ª–∞—Ç–µ–∂–∞: {payment_id}\n" \
                                         f"–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: ‚úÖ\n" \
                                         f"id –ü–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_id}\n" \
                                         f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_value} RUB üá∑üá∫\n" \
                                         f"–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {payment_date}\n\n" \
                                         f"#########################################\n\n"
                payments_report_file.write(payment_report_message)

                total_report_message = "#########################################\n" \
                                       "###################TOTAL#################\n" \
                                       "#########################################\n\n" \
                                       f"–ò—Ç–æ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_money} RUB üá∑üá∫"

        with open(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏.txt", 'a+', encoding='utf-8') as payments_report_file:
            payments_report_file.write(total_report_message)

        payments_report_end_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=loading_start.message_id,
            text="<b>–í—ã–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–∫–æ–Ω—á–µ–Ω–∞</b>",
        )

        await message.answer("<b>–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=admin_keyboard)

        await bot.send_document(
            callback_query.from_user.id,
            open(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏.txt"),
            caption=f"‚úÖ <b>–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞–∫–æ–Ω—á–µ–Ω</b>\n\n"
                    f"<b>–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞:</b> {payments_report_start_time}\n"
                    f"<b>–ö–æ–Ω–µ—Ü —Å–±–æ—Ä–∞:</b> {payments_report_end_time}\n\n"
                    f"<b>–ò—Ç–æ–≥:</b> {total_money} RUB üá∑üá∫\n\n"
                    f"<code>–ü—Ä–∏–∫—Ä–µ–ø–ª—è—é –æ—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è</code>"
        )
    else:
        await message.answer("‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>", reply_markup=admin_keyboard)


async def get_payment_date(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer("–ó–∞—Ä–≥—É–∑–∫–∞...")

    await message.edit_text("<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –¥–∞—Ç–µ</b>")
    await message.answer("üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –¥–æ—Ö–æ–¥ –∫–æ—Ç–æ—Ä–æ–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</b>\n\n"
                         "<code>–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–∞ –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
                         "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–∏—Å–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "
                         "–∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\"</code>", reply_markup=back_admin_keyboard)

    await GetPaymentsDateState.waiting_for_date.set()


async def get_payment_date_choosing(message: types.Message, state: FSMContext):
    date = message.text

    if date != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            datetime.strptime(date, "%d.%m.%Y")
        except ValueError:
            await message.answer("‚ö†Ô∏è <b>–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ —à–∞–±–ª–æ–Ω—É</b> "
                                 "<code>–î–î.–ú–ú.–ì–ì–ì–ì</code>")
            return

        searching_date = datetime.strptime(date, "%d.%m.%Y")
        searching_date = searching_date.strftime("%Y-%m-%d")

        payments = await payments_controller.get_payments_by_date(searching_date)

        if len(payments) != 0:
            loading_start = await message.answer("<b>–ù–∞—á–∞–ª–∞—Å—å –≤—ã–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...</b>")

            payments_report_start_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

            remove(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏ {date}.txt") \
                if f"–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏ {date}.txt" in listdir(f"{path_to_config_files}") else None

            payments_report_file = open(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏ {date}.txt", 'w+', encoding='utf-8')
            payments_report_file.close()

            total_money = 0.0

            for payment in payments:
                payment_id = payment[0]
                customer_id = payment[1]
                payment_value = float(payment[2])
                payment_date = payment[3].strftime("%d.%m.%Y %H:%M:%S")

                total_money += payment_value

                with open(f"{path_to_config_files}–û—Ç—á–µ—Ç - "
                          f"–ø–ª–∞—Ç–µ–∂–∏ {date}.txt", 'a+', encoding='utf-8') as payments_report_file:
                    payment_report_message = f"id –ü–ª–∞—Ç–µ–∂–∞: {payment_id}\n" \
                                             f"–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: ‚úÖ\n" \
                                             f"id –ü–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_id}\n" \
                                             f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_value} RUB üá∑üá∫\n" \
                                             f"–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {payment_date}\n\n" \
                                             f"#########################################\n\n"
                    payments_report_file.write(payment_report_message)

                    total_report_message = "#########################################\n" \
                                           "###################TOTAL#################\n" \
                                           "#########################################\n\n" \
                                           f"–ò—Ç–æ–≥ –Ω–∞ –¥–∞—Ç—É {date}: {total_money} RUB üá∑üá∫"

            with open(f"{path_to_config_files}–û—Ç—á–µ—Ç - "
                      f"–ø–ª–∞—Ç–µ–∂–∏ {date}.txt", 'a+', encoding='utf-8') as payments_report_file:
                payments_report_file.write(total_report_message)

            payments_report_end_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

            await bot.edit_message_text(
                chat_id=message.from_user.id,
                message_id=loading_start.message_id,
                text="<b>–í—ã–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–∫–æ–Ω—á–µ–Ω–∞</b>",
            )

            await message.answer("<b>–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=admin_keyboard)

            await bot.send_document(
                message.from_user.id,
                open(f"{path_to_config_files}–û—Ç—á–µ—Ç - –ø–ª–∞—Ç–µ–∂–∏ {date}.txt"),
                caption=f"‚úÖ <b>–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞–∫–æ–Ω—á–µ–Ω</b>\n\n"
                        f"<b>–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞:</b> {payments_report_start_time}\n"
                        f"<b>–ö–æ–Ω–µ—Ü —Å–±–æ—Ä–∞:</b> {payments_report_end_time}\n\n"
                        f"<b>–ò—Ç–æ–≥:</b> {total_money} RUB üá∑üá∫\n\n"
                        f"<code>–ü—Ä–∏–∫—Ä–µ–ø–ª—è—é –æ—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –Ω–∞ –¥–∞—Ç—É {date}</code>"
            )

            await state.finish()
        else:
            await message.answer(f"‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞—Ç—ã {searching_date} "
                                 f"–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>", reply_markup=admin_keyboard)
            await state.finish()

        await state.finish()
    else:
        await message.answer("‚ö†Ô∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –¥–∞—Ç–µ –æ—Ç–º–µ–Ω–µ–Ω</b>", reply_markup=admin_keyboard)
        await state.finish()


async def get_payments_period(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    await message.edit_text("<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥</b>")

    await message.answer("üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, –¥–æ—Ö–æ–¥ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</b>\n\n"
                         "–ü–µ—Ä–∏–æ–¥ –≤–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì, (–¥—Ä—É–≥–æ–π –Ω–µ "
                         "–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è) –≥–¥–µ –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞ - –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞, –∞ –≤—Ç–æ—Ä–∞—è, —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ, –∫–æ–Ω–µ—Ü\n\n"
                         "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\"</code>",
                         reply_markup=back_admin_keyboard)

    await GetPaymentPeriodState.waiting_for_period.set()


@is_cancel
async def get_payments_period_choosing(message: types.Message, state: FSMContext):
    period = message.text

    try:
        dates = period.split(' - ')
        [date.strip() for date in dates]

        start_period_date = convert_to_date(dates[0]).strftime("%d.%m.%Y")
        end_period_date = convert_to_date(dates[1]).strftime("%d.%m.%Y")
    except:
        await message.answer("‚ö†Ô∏è <b>–ü—Ä–æ–≤–µ—Ä—Ç—å–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã</b>\n\n"
                             f"<code>–í—ã –≤–≤–µ–ª–∏: {period}</code>\n\n"
                             "<code>–ù—É–∂–Ω–æ: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
                             "<code>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</code>")
        return

    await message.answer("<b>–û—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–∞</b>", reply_markup=admin_keyboard)

    await message.answer(start_period_date)
    await message.answer(end_period_date, reply_markup=menu_keyboard)

    await state.finish()


def register_handlers_admin_payments(dp: Dispatcher):
    dp.register_callback_query_handler(
        get_payments,
        lambda callback_query: callback_query.data and callback_query.data == "admin_payments_get"
    )
    dp.register_callback_query_handler(
        get_payment_date,
        lambda callback_query: callback_query.data and callback_query.data == "admin_payments_date_get",
        state=None
    )
    dp.register_message_handler(
        get_payment_date_choosing,
        content_types=['text'], state=GetPaymentsDateState.waiting_for_date
    )
    dp.register_callback_query_handler(
        get_payments_period,
        lambda callback_query: callback_query.data and callback_query.data == "admin_payments_period_get",
        state=None
    )
    dp.register_message_handler(
        get_payments_period_choosing,
        content_types=['text'], state=GetPaymentPeriodState.waiting_for_period
    )
