# coding=utf-8


from asyncio import sleep
from datetime import datetime
from os import remove, listdir

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from keyboards.reply_keyboards.menu import *
from keyboards.inline_keyboards.admin import *
from keyboards.reply_keyboards.back_admin import *
from services.project.user_controller import UserController
from data.config import redis_helper, path_to_config_files, bot
from services.project.mailing_controller import MailingController

user_controller = UserController()
mailing_controller = MailingController()


class MailingUpdateState(StatesGroup):
    waiting_for_mailing = State()


class MailingDeleteState(StatesGroup):
    waiting_for_accept = State()


class MailingStartState(StatesGroup):
    waiting_for_accept = State()


async def update_mailing(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    await message.edit_text("<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>")
    await message.answer("üñç <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                         "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "
                         "–Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>", reply_markup=back_admin_keyboard)

    await MailingUpdateState.waiting_for_mailing.set()


async def update_mailing_choosing(message: types.Message, state: FSMContext):
    mailing = message.text

    if mailing != "–û—Ç–º–µ–Ω–∏—Ç—å":
        await mailing_controller.update_mailing(mailing)
        await message.answer("‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>", reply_markup=menu_keyboard)

        await state.finish()
    else:
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)
        await message.answer("‚ö†Ô∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=admin_keyboard)
        await state.finish()

    await state.finish()


async def delete_mailing(callback_query: types.CallbackQuery, state: FSMContext):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    mailing = await mailing_controller.get_mailing()

    if len(mailing) != 0:
        accept_keyboard = InlineKeyboardMarkup()

        no_button = InlineKeyboardButton("–ù–µ—Ç", callback_data="delete_mailing_no")
        yes_button = InlineKeyboardButton("–î–∞", callback_data="delete_mailing_yes")

        accept_keyboard.add(yes_button, no_button)

        await message.edit_text("‚ùóÔ∏è <b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</b>", reply_markup=accept_keyboard)

        await MailingDeleteState.waiting_for_accept.set()
    else:
        await message.edit_text("<b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>")
        await message.answer("‚ö†Ô∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞–¥–∞–Ω–∞</b>", reply_markup=menu_keyboard)

        await state.finish()


async def delete_mailing_accepting(callback_query: types.CallbackQuery, state: FSMContext):
    message = callback_query.message
    accept = callback_query.data.replace("delete_mailing_", '')

    await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è...")

    if accept == "yes":
        await mailing_controller.del_mailing()

        await message.edit_text("‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()
    elif accept == "no":
        await message.edit_text("‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()

    await state.finish()


async def start_mailing(callback_query: types.CallbackQuery, state: FSMContext):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    mailing = await mailing_controller.get_mailing()

    if len(mailing) != 0:
        mailing_text = mailing[0][0]

        await redis_helper.redis_set("mailing", mailing_text)

        await message.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>", reply_markup=menu_keyboard)
        await message.edit_text(f"üì∞ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b>\n\n"
                                f"{mailing_text}")

        accept_keyboard = InlineKeyboardMarkup()

        no_button = InlineKeyboardButton("–ù–µ—Ç", callback_data="start_mailing_no")
        yes_button = InlineKeyboardButton("–î–∞", callback_data="start_mailing_yes")

        accept_keyboard.add(yes_button, no_button)

        await message.answer("‚ùóÔ∏è <b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É?</b>", reply_markup=accept_keyboard)

        await MailingStartState.waiting_for_accept.set()
    else:
        await message.edit_text("<b>–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏</b>")
        await message.answer("‚ö†Ô∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞–¥–∞–Ω–∞</b>", reply_markup=menu_keyboard)

        await state.finish()


async def start_mailing_accepting(callback_query: types.CallbackQuery, state: FSMContext):
    message = callback_query.message
    accept = callback_query.data.replace("start_mailing_", '')

    await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...")

    if accept == "yes":
        mailing = str(await redis_helper.decode_bytes(
            await redis_helper.redis_get("mailing")
        ))

        await message.edit_text("üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...</b>\n\n"
                                "<code>–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –í–∞—Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ "
                                "–≤—Ä–µ–º—è :( –Ø —É–≤–µ–¥–æ–º–ª—é, –∫–æ–≥–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è</code>")

        start_mailing_date = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        remove(f"{path_to_config_files}–û—Ç—á–µ—Ç - —Ä–∞—Å—Å—ã–ª–∫–∞.txt") if \
            "–û—Ç—á–µ—Ç - —Ä–∞—Å—Å—ã–ª–∫–∞.txt" in listdir(path_to_config_files) else None

        mailing_report_file = open(f"{path_to_config_files}–û—Ç—á–µ—Ç - —Ä–∞—Å—Å—ã–ª–∫–∞.txt", 'w+', encoding='utf-8')
        mailing_report_file.close()

        users = [user[1] for user in await user_controller.get_users()]
        for user in users:
            try:
                await bot.send_message(user, mailing)

                with open(f"{path_to_config_files}–û—Ç—á–µ—Ç - —Ä–∞—Å—Å—ã–ª–∫–∞.txt", 'a+', encoding='utf-8') as mailing_report_file:
                    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                    success_message = "–°—Ç–∞—Ç—É—Å: ‚úÖ\n" \
                                      f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user}\n" \
                                      f"–î–∞—Ç–∞: {current_time}\n\n" \
                                      f"###################################\n\n"

                    mailing_report_file.write(success_message)
            except Exception as sending_error:
                with open(f"{path_to_config_files}–û—Ç—á–µ—Ç - —Ä–∞—Å—Å—ã–ª–∫–∞.txt", 'a+', encoding='utf-8') as mailing_report_file:
                    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                    failure_message = "–°—Ç–∞—Ç—É—Å: ‚ùå\n" \
                                      f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user}\n" \
                                      f"–ü—Ä–∏—á–∏–Ω–∞: {sending_error}\n" \
                                      f"–î–∞—Ç–∞: {current_time}\n\n" \
                                      f"###################################\n\n"

                    mailing_report_file.write(failure_message)

                    continue

            await sleep(0.3)

        end_mailing_date = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        await bot.send_document(
            callback_query.from_user.id,
            document=open(f"{path_to_config_files}–û—Ç—á–µ—Ç - —Ä–∞—Å—Å—ã–ª–∫–∞.txt"),
            caption="‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞</b>\n\n"
                    f"<b>–ù–∞—á–∞–ª–æ:</b> {start_mailing_date}\n"
                    f"<b>–ö–æ–Ω–µ—Ü:</b> {end_mailing_date}\n\n"
                    "<code>–ü—Ä–∏–∫—Ä–µ–ø–ª—è—é –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ</code>"
        )

        await state.finish()
    elif accept == "no":
        await message.edit_text("‚ö†Ô∏è <b>–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()

    await state.finish()


async def get_mailing(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")

    mailing = await mailing_controller.get_mailing()

    if len(mailing) != 0:
        mailing_text = mailing[0][0]

        await message.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>", reply_markup=menu_keyboard)
        await message.edit_text(f"üì∞ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b>\n\n"
                                f"{mailing_text}")
    else:
        await message.edit_text("<b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>")
        await message.answer("‚ö†Ô∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞–¥–∞–Ω–∞</b>", reply_markup=menu_keyboard)


def register_handlers_admin_mailing(dp: Dispatcher):
    dp.register_callback_query_handler(
        update_mailing,
        lambda callback_query: callback_query.data and callback_query.data == "admin_mailing_update",
        state=None
    )
    dp.register_message_handler(
        update_mailing_choosing,
        content_types=['text'], state=MailingUpdateState.waiting_for_mailing
    )
    dp.register_callback_query_handler(
        delete_mailing,
        lambda callback_query: callback_query.data and callback_query.data == "admin_mailing_del",
        state=None
    )
    dp.register_callback_query_handler(
        delete_mailing_accepting,
        lambda callback_query: callback_query.data and callback_query.data.startswith("delete_mailing_"),
        state=MailingDeleteState.waiting_for_accept
    )
    dp.register_callback_query_handler(
        start_mailing,
        lambda callback_query: callback_query.data and callback_query.data == "admin_mailing_start",
        state=None
    )
    dp.register_callback_query_handler(
        start_mailing_accepting,
        lambda callback_query: callback_query.data and callback_query.data.startswith("start_mailing_"),
        state=MailingStartState.waiting_for_accept
    )
    dp.register_callback_query_handler(
        get_mailing,
        lambda callback_query: callback_query.data and callback_query.data == "admin_mailing_get"
    )
