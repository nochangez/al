# coding=utf-8


from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from data.config import redis_helper
from services.payment.qiwi import Payments
from keyboards.reply_keyboards.back import *
from keyboards.reply_keyboards.menu import *


payments = Payments()


class TopUpState(StatesGroup):
    waiting_for_amount = State()


ready_amounts_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
ready_amounts_keyboard.add("500", "1000").add("1500", "3000").add("5500", "10000").add(back_button)


async def top_up(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer()

    await message.edit_text("üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>")
    await message.answer("üíµ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–≤ —Ä—É–±–ª—è—Ö), –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã "
                         "–ø–æ–ø–æ–ª–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å</b>\n\n"
                         "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 2500.40</code>\n\n"
                         "<b>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
                         "—É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–∏—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ "
                         "–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ)</b>\n\n"
                         "<code>–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> "
                         "<b>üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>", reply_markup=ready_amounts_keyboard)

    await TopUpState.waiting_for_amount.set()


async def top_up_choosing(message: types.Message, state: FSMContext):
    amount = message.text

    if amount != "üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        try:
            float(amount)
        except:
            await message.answer("‚ö† <b>–ü–æ–ø–æ–ª–Ω—è–µ–º–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>\n\n"
                                 "<code>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ "
                                 "–¥–ª—è –æ–ø–ª–∞—Ç—ã —Å—É–º–º–∞–º–∏, –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ</code>",
                                 reply_markup=ready_amounts_keyboard)
            return

        bill = await payments.create_payment(amount=amount)

        bill_id = bill.get('bill_id')
        pay_url = bill.get('pay_url')

        buy_keyboard = types.InlineKeyboardMarkup()

        payment_url_button = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)
        check_payment_button = types.InlineKeyboardButton(
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_payment_{bill_id}"
        )
        buy_keyboard.add(payment_url_button).add(check_payment_button)

        await redis_helper.redis_set("top_up_amount", amount)

        await message.answer("üì§ <b>–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>", reply_markup=types.ReplyKeyboardRemove())
        await message.answer(f"üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>{amount}</code> —Ä—É–±.\n"
                             f"‚è≥ <b>–°—á–µ—Ç –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑:</b> <code>5</code> –º–∏–Ω.\n\n"
                             f"<code>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code>\n"
                             f"<b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>", reply_markup=buy_keyboard)

        await state.finish()
    else:
        await message.answer("‚ö†Ô∏è <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=menu_keyboard)
        await state.finish()

    await state.finish()


def register_handlers_top_up(dp: Dispatcher):
    dp.register_callback_query_handler(
        top_up,
        lambda callback_query: callback_query.data and callback_query.data == "top_up_balance",
        state=None
    )
    dp.register_message_handler(top_up_choosing, content_types=['text'], state=TopUpState.waiting_for_amount)
