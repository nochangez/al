# coding=utf-8


from datetime import datetime

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from mysql.connector.errors import DataError
from aiogram.dispatcher.filters.state import StatesGroup, State

from data.config import redis_helper
from keyboards.reply_keyboards.menu import *
from keyboards.reply_keyboards.back_admin import *
from services.telegram.user_info import run_get_user_info
from services.project.user_controller import UserController

user_controller = UserController()


class ProfileGetState(StatesGroup):
    waiting_for_user = State()


class ProfileDeleteState(StatesGroup):
    waiting_for_user = State()
    waiting_for_accept = State()


class ProfileChangeState(StatesGroup):
    waiting_for_user = State()
    waiting_for_point = State()

    waiting_for_city = State()
    waiting_for_balance = State()
    waiting_for_purchases = State()


async def get_profile(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    await message.edit_text("<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è</b>")
    # await message.answer("üßü <b>–í–≤–µ–¥–∏—Ç–µ @–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –µ–≥–æ telegram id</b>\n\n"
    #                      "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>",
    #                      reply_markup=back_admin_keyboard)

    await message.answer("<b>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞</b>")

    # await ProfileGetState.waiting_for_user.set()


async def get_profile_choosing(message: types.Message, state: FSMContext):
    user = message.text

    if user != "–û—Ç–º–µ–Ω–∏—Ç—å":
        start_searching_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        try:
            user_telegram_info = await run_get_user_info(user)

            telegram_user_id = user_telegram_info['id']
            first_name = user_telegram_info['first_name']
            phone = user_telegram_info['phone'] if user_telegram_info['phone'] is not None else "–ù–µ—Ç"
            last_name = user_telegram_info['last_name'] if user_telegram_info['last_name'] is not None else "–ù–µ—Ç"
            lang_code = user_telegram_info['lang_code'] if user_telegram_info['lang_code'] is not None else "–ù–µ—Ç"
            username = f"@{user_telegram_info['username']}" if user_telegram_info['username'] is not None else "–ù–µ—Ç"

            user_bot_info = await user_controller.get_user_info(telegram_user_id)

            telegram_user_report = f"üìß <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram:\n\n</b>" \
                                   f"<b>user_id:</b> <code>{telegram_user_id}</code>\n" \
                                   f"<b>–°—Å—ã–ª–∫–∞:</b> <a href='tg://user?id={telegram_user_id}'>{first_name}</a>\n" \
                                   f"<b>–ò–º—è:</b> {first_name}\n" \
                                   f"<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n" \
                                   f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {username}\n" \
                                   f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n" \
                                   f"<b>–ö–æ–¥ —è–∑—ã–∫–∞:</b> <code>{lang_code}</code>"
            if len(user_bot_info) != 0:
                bot_id = user_bot_info[0]
                bot_user_id = user_bot_info[1]
                bot_user_city = user_bot_info[2]
                bot_user_balance = float(user_bot_info[4])
                bot_user_purchases = user_bot_info[3] if user_bot_info[3] is not None else "–ù–µ—Ç"

                bot_user_report = f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–æ—Ç–µ:</b>\n\n" \
                                  f"<b>id:</b> <code>{bot_id}</code>\n" \
                                  f"<b>user_id:</b> <code>{bot_user_id}</code>\n" \
                                  f"<b>–ì–æ—Ä–æ–¥:</b> {bot_user_city}\n" \
                                  f"<b>–ü–æ–∫—É–ø–æ–∫:</b> <code>{bot_user_purchases}</code>\n" \
                                  f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{bot_user_balance}</code>"
            else:
                bot_user_report = f"‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href=\"tg://user?id={telegram_user_id}\">{first_name}</a> " \
                                  f"–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</b>"

            await message.answer(telegram_user_report)
            await message.answer(bot_user_report)

            await state.finish()
        except Exception as error:
            await message.answer(str(error))
            await message.answer("‚ö†Ô∏è <b>–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, "
                                 "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>")
            return

        end_searching_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        collecting_user_report = f"üßæ <b>–û—Ç—á–µ—Ç –ø–æ —Å–±–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>\n\n" \
                                 f"<b>–ù–∞—á–∞–ª–æ:</b> {start_searching_time}\n" \
                                 f"<b>–ö–æ–Ω–µ—Ü:</b> {end_searching_time}"

        await message.answer(collecting_user_report, reply_markup=menu_keyboard)

        await state.finish()
    else:
        await message.answer("‚ö†Ô∏è <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω</b>", reply_markup=menu_keyboard)
        await state.finish()

    await state.finish()


async def delete_profile(callback_query: types.CallbackQuery):
    message = callback_query.message

    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    await message.edit_text("<b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>")
    await message.answer("üßü <b>–í–≤–µ–¥–∏—Ç–µ @–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –µ–≥–æ telegram id</b>\n\n"
                         "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>",
                         reply_markup=back_admin_keyboard)

    await ProfileDeleteState.waiting_for_user.set()


async def delete_profile_choosing(message: types.Message, state: FSMContext):
    user = message.text

    if user != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            user_bot_info = await user_controller.get_user_info(user)

            if len(user_bot_info) != 0:
                bot_id = user_bot_info[0]
                bot_user_id = user_bot_info[1]
                bot_user_city = user_bot_info[2]
                bot_user_balance = float(user_bot_info[4])
                bot_user_purchases = user_bot_info[3] if user_bot_info[3] is not None else "–ù–µ—Ç"

                bot_user_report = f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–æ—Ç–µ:</b>\n\n" \
                                  f"<b>id:</b> <code>{bot_id}</code>\n" \
                                  f"<b>user_id:</b> <code>{bot_user_id}</code>\n" \
                                  f"<b>–ì–æ—Ä–æ–¥:</b> {bot_user_city}\n" \
                                  f"<b>–ü–æ–∫—É–ø–æ–∫:</b> <code>{bot_user_purchases}</code>\n" \
                                  f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{bot_user_balance}</code>"

                await message.answer(bot_user_report, reply_markup=menu_keyboard)

                accept_keyboard = types.InlineKeyboardMarkup()

                no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="profile_del_no")
                yes_button = types.InlineKeyboardButton("–î–∞", callback_data="profile_del_yes")

                accept_keyboard.add(yes_button, no_button)

                await redis_helper.redis_set("deleting_user_id", user)
                await message.answer(f"‚ùóÔ∏è <b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å "
                                     f"<a href='tg://user?id={user}'>{user}</a>?</b>",
                                     reply_markup=accept_keyboard)

                await ProfileDeleteState.next()
            else:
                bot_user_report = f"‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href=\"tg://user?id={user}\">{user}</a> " \
                                  f"–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</b>"
                await message.answer(bot_user_report, reply_markup=menu_keyboard)

                await state.finish()
        except:
            await message.answer("‚ö†Ô∏è <b>–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, "
                                 "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>")
            return
    else:
        await message.answer("‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()


async def delete_profile_accepting(callback_query: types.CallbackQuery, state: FSMContext):
    message = callback_query.message
    accept = callback_query.data.replace("profile_del_", '')

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    if accept == "yes":
        deleting_user_id = int(await redis_helper.decode_bytes(
            await redis_helper.redis_get("deleting_user_id")
        ))

        if (int(callback_query.from_user.id) == deleting_user_id) and (deleting_user_id != 650387714):
            await message.edit_text("‚ùì <b>–£–¥–∞–ª–∏—Ç—å —Å–µ–±—è? –ù—É –ª–∞–¥–Ω–æ...</b>")

        if deleting_user_id == 650387714:
            # await message.edit_text(f"‚ö†Ô∏è <b>–≠—Ç–æ–≥–æ <a href='tg://user?id={deleting_user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> "
            # f"—É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è</b>")
            await message.answer("<b>–ò–¥–∏ –Ω–∞—Ö—É–π</b>")
            await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

            await state.finish()
        else:
            await user_controller.delete_user(str(deleting_user_id))
            await message.edit_text(f"‚úÖ <b><a href='tg://user?id={deleting_user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —É–¥–∞–ª–µ–Ω</b>")
            await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

            await state.finish()
    elif accept == "no":
        await message.edit_text("‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()

    await state.finish()


async def change_profile(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    await message.edit_text("<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>")
    await message.answer("üßü <b>–í–≤–µ–¥–∏—Ç–µ telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                         "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>", reply_markup=back_admin_keyboard)

    await ProfileChangeState.waiting_for_user.set()


async def change_profile_choosing(message: types.Message, state: FSMContext):
    user = message.text

    if user != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            int(user)
        except:
            await message.answer("‚ö†Ô∏è <b>id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>")
            return

        is_user = await user_controller.is_user(user)

        if is_user:
            await redis_helper.redis_set("changing_user_id", user)

            await message.answer(f"‚úÖ <b><a href='tg://user?id={user}'>{user}</a> –ø—Ä–∏–Ω—è—Ç–æ</b>")

            user_bot_info = await user_controller.get_user_info(user)

            bot_id = user_bot_info[0]
            bot_user_id = user_bot_info[1]
            bot_user_city = user_bot_info[2]
            bot_user_balance = float(user_bot_info[4])
            bot_user_purchases = user_bot_info[3] if user_bot_info[3] is not None else "–ù–µ—Ç"

            user_profile_message = f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <a href='tg://user?id={user}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</a> –≤ –±–æ—Ç–µ:</b>\n\n" \
                                   f"<b>id:</b> <code>{bot_id}</code>\n" \
                                   f"<b>user_id:</b> <code>{bot_user_id}</code>\n" \
                                   f"<b>–ì–æ—Ä–æ–¥:</b> {bot_user_city}\n" \
                                   f"<b>–ü–æ–∫—É–ø–æ–∫:</b> <code>{bot_user_purchases}</code>\n" \
                                   f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{bot_user_balance}</code>"

            changes_keyboard = types.InlineKeyboardMarkup()

            change_cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="profile_change_cancel")
            change_city_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="profile_change_city")
            change_balance_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                                               callback_data="profile_change_balance")
            change_purchases_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫–∏",
                                                                 callback_data="profile_change_purchases")

            changes_keyboard.add(change_city_button).add(change_purchases_button).add(change_balance_button).add(
                change_cancel_button
            )

            await message.answer(user_profile_message, reply_markup=changes_keyboard)

            await ProfileChangeState.next()
        else:
            await message.answer(f"‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href=\"tg://user?id={user}\">{user}</a> "
                                 "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</b>", reply_markup=menu_keyboard)
            await state.finish()
    else:
        await message.answer("‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=menu_keyboard)
        await state.finish()


async def change_profile_choosing_point(callback_query: types.CallbackQuery, state: FSMContext):
    message = callback_query.message
    changing_point = callback_query.data.replace("profile_change_", '')

    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")

    if changing_point == "city":
        await message.edit_text("<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞</b>")
        await message.answer(" <b>–í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –≥–æ—Ä–æ–¥</b>\n\n"
                             "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>",
                             reply_markup=back_admin_keyboard)

        await ProfileChangeState.waiting_for_city.set()
    elif changing_point == "balance":
        await message.edit_text("<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>")
        await message.answer(" <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                             "!üö∏! –í–Ω–∏–º–∞–Ω–∏–µ !üö∏! –ë–∞–ª–∞–Ω—Å –Ω–µ –±—É–¥–µ—Ç —É–±–∞–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–∏–±–∞–≤–ª–µ–Ω –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É, "
                             "–æ–Ω –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω\n\n"
                             "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>",
                             reply_markup=back_admin_keyboard)

        await ProfileChangeState.waiting_for_balance.set()
    elif changing_point == "purchases":
        await message.edit_text("<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>")
        await message.answer(" <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                             "!üö∏! –í–Ω–∏–º–∞–Ω–∏–µ !üö∏! –ü–æ–∫—É–ø–∫–∏ –Ω–µ –±—É–¥—É—Ç —É–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –ø—Ä–∏–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫, "
                             "–æ–Ω–∏ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã\n\n"
                             "<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –ø–æ–∫—É–ø–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>",
                             reply_markup=back_admin_keyboard)

        await ProfileChangeState.waiting_for_purchases.set()
    elif changing_point == "cancel":
        await message.edit_text("‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()


async def change_profile_city_choosing(message: types.Message, state: FSMContext):
    city = message.text

    if city != "–û—Ç–º–µ–Ω–∏—Ç—å":
        user_id = int(await redis_helper.decode_bytes(
            await redis_helper.redis_get("changing_user_id")
        ))

        if user_id != 650387714:
            try:
                await user_controller.change_city(user_id, city)
                await message.answer(f"‚úÖ <b><a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a> –æ–±–Ω–æ–≤–ª–µ–Ω</b>",
                                     reply_markup=menu_keyboard)

                await state.finish()
            except DataError:
                await message.answer("‚ö†Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>")
                return
        else:
            await message.answer(f"‚ö†Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> "
                                 f"–∑–∞–ø—Ä–µ—â–µ–Ω–æ</b>")
            await state.finish()
    else:
        await message.edit_text("‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()

    await state.finish()


async def change_profile_balance_choosing(message: types.Message, state: FSMContext):
    balance = message.text

    if balance != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            float(balance)
        except:
            await message.answer("‚ö†Ô∏è <b>–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Ü–µ–ª—ã–º –ª–∏–±–æ –Ω–µ —Ü–µ–ª—ã–º - –Ω–µ –≤–∞–∂–Ω–æ, "
                                 "–≥–ª–∞–≤–Ω–æ–µ —á–∏—Å–ª–æ–º</b>")
            return

        user_id = int(await redis_helper.decode_bytes(
            await redis_helper.redis_get("changing_user_id")
        ))

        if user_id != 650387714:
            try:
                await user_controller.change_balance(user_id, balance)
                await message.answer(f"‚úÖ <b><a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a> –æ–±–Ω–æ–≤–ª–µ–Ω</b>",
                                     reply_markup=menu_keyboard)

                await state.finish()
            except DataError:
                await message.answer("‚ö†Ô∏è <b>–ë–∞–ª–∞–Ω—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>")
                return
        else:
            await message.answer(f"‚ö†Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> "
                                 f"–∑–∞–ø—Ä–µ—â–µ–Ω–æ</b>")
            await state.finish()
    else:
        await message.edit_text("‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()

    await state.finish()


async def change_profile_purchases_choosing(message: types.Message, state: FSMContext):
    purchases = message.text

    if purchases != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            int(purchases)
        except:
            pass

        user_id = int(await redis_helper.decode_bytes(
            await redis_helper.redis_get("changing_user_id")
        ))

        if user_id != 650387714:
            try:
                await user_controller.change_purchases(user_id, purchases)
                await message.answer(f"‚úÖ <b><a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a> –æ–±–Ω–æ–≤–ª–µ–Ω</b>",
                                     reply_markup=menu_keyboard)

                await state.finish()
            except DataError:
                await message.answer("‚ö†Ô∏è <b>–ß–∏—Å–ª–æ –ø–æ–∫—É–ø–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>")
                return
        else:
            await message.answer(f"‚ö†Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> "
                                 f"–∑–∞–ø—Ä–µ—â–µ–Ω–æ</b>")
            await state.finish()
    else:
        await message.edit_text("‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
        await message.answer("<b>–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é</b>", reply_markup=menu_keyboard)

        await state.finish()

    await state.finish()


def register_handlers_admin_profile(dp: Dispatcher):
    dp.register_callback_query_handler(
        get_profile,
        lambda callback_query: callback_query.data and callback_query.data == "admin_profile_get",
        state=None
    )
    dp.register_message_handler(
        get_profile_choosing,
        content_types=['text'], state=ProfileGetState.waiting_for_user
    )
    dp.register_callback_query_handler(
        delete_profile,
        lambda callback_query: callback_query.data and callback_query.data == "admin_profile_del",
        state=None
    )
    dp.register_message_handler(
        delete_profile_choosing,
        content_types=['text'], state=ProfileDeleteState.waiting_for_user
    )
    dp.register_callback_query_handler(
        delete_profile_accepting,
        lambda callback_query: callback_query.data and callback_query.data.startswith("profile_del_"),
        state=ProfileDeleteState.waiting_for_accept
    )
    dp.register_callback_query_handler(
        change_profile,
        lambda callback_query: callback_query.data and callback_query.data == "admin_profile_change",
        state=None
    )
    dp.register_message_handler(
        change_profile_choosing,
        content_types=['text'], state=ProfileChangeState.waiting_for_user
    )
    dp.register_callback_query_handler(
        change_profile_choosing_point,
        lambda callback_query: callback_query.data and callback_query.data.startswith("profile_change_"),
        state=ProfileChangeState.waiting_for_point
    )
    dp.register_message_handler(
        change_profile_city_choosing,
        content_types=['text'], state=ProfileChangeState.waiting_for_city
    )
    dp.register_message_handler(
        change_profile_balance_choosing,
        content_types=['text'], state=ProfileChangeState.waiting_for_balance
    )
    dp.register_message_handler(
        change_profile_purchases_choosing,
        content_types=['text'], state=ProfileChangeState.waiting_for_purchases
    )
