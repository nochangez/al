# coding=utf-8


from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from data.config import redis_helper
from keyboards.reply_keyboards.menu import *
from keyboards.reply_keyboards.accept import *
from services.project.goods_controller import GoodsController
from keyboards.reply_keyboards.back_admin import back_admin_keyboard


goods_controller = GoodsController()


class AddGoodState(StatesGroup):
    waiting_for_good = State()
    waiting_for_price = State()


class DelGoodState(StatesGroup):
    waiting_for_good = State()


class ChangeGoodState(StatesGroup):
    waiting_for_good = State()


class ChangeGoodNameState(StatesGroup):
    waiting_for_name = State()
    waiting_for_accept = State()


class ChangeGoodPriceState(StatesGroup):
    waiting_for_price = State()
    waiting_for_accept = State()


async def add_good(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer()
    await message.edit_text("<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>")
    await message.answer("‚ûï –í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è</b> —Ç–æ–≤–∞—Ä–∞", reply_markup=back_admin_keyboard)

    await AddGoodState.waiting_for_good.set()


async def add_good_choose_name(message: types.Message, state: FSMContext):
    good_name = message.text

    if str(good_name) != "–û—Ç–º–µ–Ω–∏—Ç—å":
        await redis_helper.redis_set('good_name', good_name)

        await message.answer("‚úÖ <b>–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>")
        await message.answer("‚ûï –í–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É</b> —Ç–æ–≤–∞—Ä–∞ —á–∏—Å–ª–æ–º\n\n"
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 7000 –∏–ª–∏ 3000.45</code>")

        await AddGoodState.next()
    else:
        await message.answer("‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=menu_keyboard)
        await state.finish()


async def add_good_choose_price(message: types.Message, state: FSMContext):
    price = message.text

    if str(price) != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            float(price)
        except:
            await message.answer("‚ùóÔ∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n"
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n<code>–î–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "
                                 "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\"</code>")
            return

        price = float(price)

        await redis_helper.redis_set('price', price)
        await message.answer("‚úÖ <b>–°—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>")

        good_name = await redis_helper.decode_bytes(
            await redis_helper.redis_get('good_name')
        )
        await goods_controller.add_good(good_name=good_name, price=price)

        good_id = await goods_controller.get_good_by_name(good_name)
        good_id = good_id[0]

        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä!\n\n"
                             f"<b>id</b>: <code>{good_id}</code>\n"
                             f"<b>–ò–º—è</b>: <code>{good_name}</code>\n"
                             f"<b>–¶–µ–Ω–∞</b>: <code>{price}</code>", reply_markup=menu_keyboard)
    else:
        await message.answer("‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=menu_keyboard)
        await state.finish()

    await state.finish()


async def del_good(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer()

    goods = await goods_controller.get_goods()

    if len(goods) != 0:
        good_info_blocks = []

        for good in goods:
            price = float(good[2])
            good_id = int(good[0])
            good_name = str(good[1])

            good_info_blocks.append(
                f"<b>id</b>: <code>{good_id}</code>\n"
                f"<b>–ò–º—è</b>: <code>{good_name}</code>\n"
                f"<b>–¶–µ–Ω–∞</b>: <code>{price} —Ä—É–±.</code>"
            )

        goods_message = '\n‚ûñ‚ûñ‚ûñ‚ûñ\n'.join(good_info_blocks)
        await message.edit_text(goods_message)

        await message.answer("<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω</b> ‚òùÔ∏è", reply_markup=back_admin_keyboard)
        await message.answer("üìÆ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (id) —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                             "—É–¥–∞–ª–∏—Ç—å —á–∏—Å–ª–æ–º</b>\n\n"
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 9</code>")

        await DelGoodState.waiting_for_good.set()
    else:
        await message.edit_text("<b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>")
        no_goods_message = "‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç!</b>\n\n" \
                           "<code>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ " \
                           "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –≤—ã–∑–≤–∞—Ç—å –µ–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ —Å—é–¥–∞</code> /admin"
        await message.answer(no_goods_message, reply_markup=menu_keyboard)


async def del_good_choosing_id(message: types.Message, state: FSMContext):
    good_id = message.text

    if str(good_id) != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            int(good_id)
        except:
            await message.answer("‚ùó Id —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n"
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n<code>–î–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "
                                 "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\"</code>")
            return

        does_good_exist = await goods_controller.does_good_exist_id(good_id)

        if does_good_exist:
            good_id = int(good_id)
            await goods_controller.del_good(good_id)

            await message.answer("‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", reply_markup=menu_keyboard)

            await state.finish()
        else:
            await message.answer("‚ö† <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>Ô∏è\n\n"
                                 f"–¢–æ–≤–∞—Ä —Å id <code>{good_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
                                 f"<code>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ, –≤—ã–±–µ—Ä–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞ "
                                 f"–∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞</code>")
            return
    else:
        await message.answer("‚úÖ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=menu_keyboard)
        await state.finish()

    await state.finish()


async def change_good(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer()

    goods = await goods_controller.get_goods()

    if len(goods) != 0:
        good_info_blocks = []

        for good in goods:
            price = float(good[2])
            good_id = int(good[0])
            good_name = str(good[1])

            good_info_blocks.append(
                f"<b>id</b>: <code>{good_id}</code>\n"
                f"<b>–ò–º—è</b>: <code>{good_name}</code>\n"
                f"<b>–¶–µ–Ω–∞</b>: <code>{price} —Ä—É–±.</code>"
            )

        goods_message = '\n‚ûñ‚ûñ‚ûñ‚ûñ\n'.join(good_info_blocks)
        await message.edit_text(goods_message)

        await message.answer("<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω</b> ‚òùÔ∏è", reply_markup=back_admin_keyboard)
        await message.answer("üñä <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (id) —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                             "–∏–∑–º–µ–Ω–∏—Ç—å —á–∏—Å–ª–æ–º</b>\n\n"
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 9</code>")

        await ChangeGoodState.waiting_for_good.set()
    else:
        await message.edit_text("<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>")
        no_goods_message = "‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç!</b>\n\n" \
                           "<code>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ " \
                           "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –≤—ã–∑–≤–∞—Ç—å –µ–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ —Å—é–¥–∞</code> /admin"
        await message.answer(no_goods_message, reply_markup=menu_keyboard)


async def change_good_choosing_id(message: types.Message, state: FSMContext):
    good_id = message.text

    if str(good_id) != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            int(good_id)
        except:
            await message.answer("‚ùó Id —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n"
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "
                                 "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\"</code>")
            return

        does_good_exist = await goods_controller.does_good_exist_id(good_id)

        if does_good_exist:
            good_id = int(good_id)
            await redis_helper.redis_set("good_id", good_id)

            change_keyboard = types.InlineKeyboardMarkup()

            change_name_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="goods_change_name")
            change_price_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="goods_change_price")

            change_keyboard.add(change_name_button).add(change_price_button)

            await message.answer("‚úçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:</b>", reply_markup=change_keyboard)

            await state.finish()
        else:
            await message.answer("‚ö† <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>Ô∏è\n\n"
                                 f"–¢–æ–≤–∞—Ä —Å id <code>{good_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
                                 f"<code>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ, –≤—ã–±–µ—Ä–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞ "
                                 f"–∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞</code>")
            return
    else:
        await message.answer("‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>", reply_markup=menu_keyboard)
        await state.finish()

    await state.finish()


async def change_good_name(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer()

    await message.edit_text("<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞</b>")
    await message.answer("‚ûï –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –∏–º—è</b> —Ç–æ–≤–∞—Ä–∞", reply_markup=back_admin_keyboard)

    await ChangeGoodNameState.waiting_for_name.set()


async def change_good_name_choosing(message: types.Message, state: FSMContext):
    new_good_name = message.text

    if new_good_name != "–û—Ç–º–µ–Ω–∏—Ç—å":
        good_id = int(await redis_helper.decode_bytes(
            await redis_helper.redis_get("good_id")
        ))

        does_good_exist = await goods_controller.does_good_exist_id(good_id)

        if does_good_exist:
            good_info = await goods_controller.get_good_by_id(good_id)
            old_good_name = good_info[1]

            change_good_name_message = f"‚ö† <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n\n" \
                                       f"üë®‚Äçü¶≥ <b>–°—Ç–∞—Ä–æ–µ –∏–º—è</b>: <code>{old_good_name}</code>\n" \
                                       f"‚öúÔ∏è <b>–ù–æ–≤–æ–µ –∏–º—è</b>: <code>{new_good_name}</code>\n\n" \
                                       "<code>–î–∞ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é\n" \
                                       "–ù–µ—Ç - –æ—Ç–∫–ª–æ–Ω—è—é</code>"
            await message.answer(change_good_name_message, reply_markup=accept_keyboard)
            await redis_helper.redis_set("new_good_name", new_good_name)

            await ChangeGoodNameState.next()
        else:
            await message.answer("‚ö† <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>Ô∏è\n\n"
                                 f"–¢–æ–≤–∞—Ä —Å id <code>{good_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
                                 f"<code>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ, –≤—ã–±–µ—Ä–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞ "
                                 f"–∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞</code>")
            return
    else:
        await message.answer("‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>", reply_markup=menu_keyboard)
        await state.finish()


async def change_good_name_accept(message: types.Message, state: FSMContext):
    accept_answer = message.text

    if accept_answer.lower() in ('–¥–∞', '–Ω–µ—Ç'):
        if accept_answer.lower() == "–¥–∞":
            good_id = int(await redis_helper.decode_bytes(
                await redis_helper.redis_get("good_id")
            ))
            new_good_name = str(await redis_helper.decode_bytes(
                await redis_helper.redis_get("new_good_name")
            ))

            await goods_controller.change_good_name(good_id, new_good_name)
            await message.answer("‚úÖ <b>–ò–º—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>", reply_markup=menu_keyboard)

            await state.finish()
        elif accept_answer.lower() == "–Ω–µ—Ç":
            await message.answer("‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>", reply_markup=menu_keyboard)
            await state.finish()
    else:
        await message.answer("<code>–î–∞</code> <b>–∏–ª–∏</b> <code>–ù–µ—Ç</code>")
        return

    await state.finish()


async def change_good_price(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer()

    await message.edit_text("<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞</b>")
    await message.answer("‚ûï –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é —Ü–µ–Ω—É</b> —Ç–æ–≤–∞—Ä–∞", reply_markup=back_admin_keyboard)

    await ChangeGoodPriceState.waiting_for_price.set()


async def change_good_price_choosing(message: types.Message, state: FSMContext):
    new_good_price = message.text

    if new_good_price != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            float(new_good_price)
        except:
            await message.answer("‚ùó <b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>\n\n"
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n<code>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è "
                                 "—Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\"</code>")
            return

        good_id = int(await redis_helper.decode_bytes(
            await redis_helper.redis_get("good_id")
        ))

        does_good_exist = await goods_controller.does_good_exist_id(good_id)

        if does_good_exist:
            good_info = await goods_controller.get_good_by_id(good_id)
            old_good_price = good_info[-1]

            change_good_name_message = f"‚ö† <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n\n" \
                                       f"ü™ô <b>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞</b>: <code>{old_good_price}</code> —Ä—É–±.\n" \
                                       f"üíµÔ∏è <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞</b>: <code>{new_good_price}</code> —Ä—É–±.\n\n" \
                                       "<code>–î–∞ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é\n" \
                                       "–ù–µ—Ç - –æ—Ç–∫–ª–æ–Ω—è—é</code>"
            await message.answer(change_good_name_message, reply_markup=accept_keyboard)
            await redis_helper.redis_set("new_good_price", new_good_price)

            await ChangeGoodPriceState.next()
        else:
            await message.answer("‚ö† <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>Ô∏è\n\n"
                                 f"–¢–æ–≤–∞—Ä —Å id <code>{good_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
                                 f"<code>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ, –≤—ã–±–µ—Ä–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞ "
                                 f"–∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞</code>")
            return
    else:
        await message.answer("‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>", reply_markup=menu_keyboard)
        await state.finish()


async def change_good_price_choosing_accept(message: types.Message, state: FSMContext):
    accept_answer = message.text

    if accept_answer.lower() in ('–¥–∞', '–Ω–µ—Ç'):
        if accept_answer.lower() == "–¥–∞":
            good_id = int(await redis_helper.decode_bytes(
                await redis_helper.redis_get("good_id")
            ))
            new_good_price = float(await redis_helper.decode_bytes(
                await redis_helper.redis_get("new_good_price")
            ))

            await goods_controller.change_good_price(good_id, new_good_price)
            await message.answer("‚úÖ <b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>", reply_markup=menu_keyboard)

            await state.finish()
        elif accept_answer.lower() == "–Ω–µ—Ç":
            await message.answer("‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>", reply_markup=menu_keyboard)
            await state.finish()
    else:
        await message.answer("<code>–î–∞</code> <b>–∏–ª–∏</b> <code>–ù–µ—Ç</code>")
        return

    await state.finish()


async def show_goods(callback_query: types.CallbackQuery):
    message = callback_query.message

    await callback_query.answer()

    goods = await goods_controller.get_goods()

    if len(goods) != 0:
        good_info_blocks = []

        for good in goods:
            price = float(good[2])
            good_id = int(good[0])
            good_name = str(good[1])

            good_info_blocks.append(
                f"<b>id</b>: <code>{good_id}</code>\n"
                f"<b>–ò–º—è</b>: <code>{good_name}</code>\n"
                f"<b>–¶–µ–Ω–∞</b>: <code>{price} —Ä—É–±.</code>"
            )

        goods_message = '\n‚ûñ‚ûñ‚ûñ‚ûñ\n'.join(good_info_blocks)

        await message.answer("<b>–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω</b>", reply_markup=menu_keyboard)
        await message.edit_text(goods_message)
    else:
        no_goods_message = "‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç!</b>\n\n" \
                           "<code>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ " \
                           "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –≤—ã–∑–≤–∞—Ç—å –µ–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ —Å—é–¥–∞</code> /admin"
        await message.edit_text(no_goods_message)


def register_handlers_admin_goods(dp: Dispatcher):
    dp.register_callback_query_handler(
        add_good,
        lambda callback_query: callback_query.data and callback_query.data == "admin_goods_add",
        state=None
    )
    dp.register_message_handler(add_good_choose_name, content_types=['text'], state=AddGoodState.waiting_for_good)
    dp.register_message_handler(add_good_choose_price, content_types=['text'], state=AddGoodState.waiting_for_price)
    dp.register_callback_query_handler(
        del_good,
        lambda callback_query: callback_query.data and callback_query.data == "admin_goods_del",
        state=None
    )
    dp.register_message_handler(del_good_choosing_id, content_types=['text'], state=DelGoodState.waiting_for_good)
    dp.register_callback_query_handler(
        change_good,
        lambda callback_query: callback_query.data and callback_query.data == "admin_goods_change",
        state=None
    )
    dp.register_message_handler(change_good_choosing_id, content_types=['text'], state=ChangeGoodState.waiting_for_good)
    dp.register_callback_query_handler(
        change_good_name,
        lambda callback_query: callback_query.data and callback_query.data == "goods_change_name",
        state=None
    )
    dp.register_message_handler(
        change_good_name_choosing,
        content_types=['text'], state=ChangeGoodNameState.waiting_for_name
    )
    dp.register_message_handler(
        change_good_name_accept,
        content_types=['text'], state=ChangeGoodNameState.waiting_for_accept
    )
    dp.register_callback_query_handler(
        change_good_price,
        lambda callback_query: callback_query.data and callback_query.data == "goods_change_price",
        state=None
    )
    dp.register_message_handler(
        change_good_price_choosing,
        content_types=['text'], state=ChangeGoodPriceState.waiting_for_price
    )
    dp.register_message_handler(
        change_good_price_choosing_accept,
        content_types=['text'], state=ChangeGoodPriceState.waiting_for_accept
    )
    dp.register_callback_query_handler(
        show_goods,
        lambda callback_query: callback_query.data and callback_query.data == "admin_goods_show"
    )
