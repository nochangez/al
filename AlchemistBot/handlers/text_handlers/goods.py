# coding=utf-8


from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from data.config import redis_helper
from services.payment.qiwi import Payments
from keyboards.reply_keyboards.back import *
from keyboards.reply_keyboards.menu import *
from services.project.user_controller import UserController
from services.project.goods_controller import GoodsController

payments = Payments()
user_controller = UserController()
goods_controller = GoodsController()


class OrderGoodState(StatesGroup):
    waiting_for_good_name = State()


async def goods(message: types.Message):
    user_id = message.from_user.id
    is_user = await user_controller.is_user(user_id)

    if is_user:
        all_goods = await goods_controller.get_goods()
        city = await user_controller.get_user_info(user_id)
        city = city[2]

        if len(all_goods) != 0:
            goods_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            for good in all_goods:
                good_name = str(good[1])
                goods_keyboard.add(f"üéÅ {good_name}")

            goods_keyboard.add(back_button)

            await message.answer(f"üè† <b>–ì–æ—Ä–æ–¥</b>: {city}\n"
                                 "‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</b>:", reply_markup=goods_keyboard)

            await OrderGoodState.waiting_for_good_name.set()
        else:
            no_goods_message = "‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç!</b>\n\n"
            await message.answer(no_goods_message)
    else:
        not_user_message = f"‚ö†Ô∏è <b>{message.from_user.first_name}</b>, " \
                           f"–í—ã –ø–æ–∫–∞ —á—Ç–æ <u>–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</u>!\n\n" \
                           f"<code>–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ</code> /start"
        await message.answer(not_user_message)


async def good_name_choosing(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    good_name = message.text.replace("üéÅ ", '')
    does_good_exist = await goods_controller.does_good_exist_name(good_name)

    if does_good_exist and good_name != "üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        user_info = await user_controller.get_user_info(user_id)
        balance = float(user_info[-1])

        good_info = await goods_controller.get_good_by_name(good_name)
        good_price = float(good_info[-1])

        good_info_message = f"ü™Ö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>\n\n" \
                            f"üéÅ <b>–ò–º—è:</b> <code>{good_name}</code>\n" \
                            f"üí∏ <b>–¶–µ–Ω–∞:</b> <code>{good_price}</code> —Ä—É–±."
        await message.answer(good_info_message, reply_markup=back_keyboard)

        if balance < good_price:
            new_balance = float(balance - good_price)
            need_money = float(good_price - balance)

            no_money_message = "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n" \
                               f"üí∏ <b>–¶–µ–Ω–∞:</b> <code>{good_price}</code> —Ä—É–±.\n" \
                               f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}</code> —Ä—É–±.\n" \
                               f"üßÆ <b>–ù—É–∂–Ω–æ:</b> <code>{need_money}</code> —Ä—É–±.\n\n" \
                               f"ü™ô <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{need_money}</code> —Ä—É–±.\n" \
                               f"‚è≥ <b>–°—á–µ—Ç –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑:</b> <code>5 –º–∏–Ω.</code>\n\n" \
                               f"<code>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</code> <b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b> <code>–ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ " \
                               f"—Å—Ä–µ–¥—Å—Ç–≤. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</code>\n\n" \
                               "<code>–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</code> üëá"

            bill = await payments.create_payment(amount=need_money)

            bill_id = bill.get('bill_id')
            pay_url = bill.get('pay_url')

            buy_keyboard = types.InlineKeyboardMarkup()

            payment_url_button = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)
            check_payment_button = types.InlineKeyboardButton(
                "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"buy_check_payment_{bill_id}"
            )
            buy_keyboard.add(payment_url_button).add(check_payment_button)

            await message.answer(no_money_message, reply_markup=buy_keyboard)

            await redis_helper.redis_set("good_price", need_money)
        else:
            new_balance = float(balance - good_price)
            await redis_helper.redis_set("new_balance", new_balance)

            payment_created_message = f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!</b>\n\n" \
                                      f"üí∏ <b>–¶–µ–Ω–∞:</b> <code>{good_price}</code> —Ä—É–±.\n" \
                                      f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}</code> —Ä—É–±.\n" \
                                      f"üßÆ <b>–û—Å—Ç–∞–Ω–µ—Ç—Å—è:</b> <code>{new_balance}</code> —Ä—É–±.\n\n" \
                                      f"ü™ô <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{good_price}</code> —Ä—É–±.\n\n" \
                                      f"<code>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–ª–∞—Ç–µ–∂?</code>" \

            accept_keyboard = types.InlineKeyboardMarkup()

            no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="accept_pay_no")
            yes_button = types.InlineKeyboardButton("–î–∞", callback_data="accept_pay_yes")

            accept_keyboard.add(yes_button, no_button)

            await message.answer(payment_created_message, reply_markup=accept_keyboard)

        await state.finish()
    else:
        if good_name != "üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
            no_goods_message = f"‚ö† <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n" \
                               f"–¢–æ–≤–∞—Ä —Å –∏–º–µ–Ω–µ–º \"<code>{good_name}</code>\" " \
                               f"–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n" \
                               f"<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>\n<code>–î–ª—è –±–æ–ª—å—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ " \
                               f"–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏</code>"
            await message.answer(no_goods_message)
            return
        else:
            await state.finish()
            await message.answer("<b>–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω!</b>", reply_markup=menu_keyboard)


async def accept_payment(callback_query: types.CallbackQuery):
    message = callback_query.message
    user_accept = callback_query.data.replace("accept_pay_", '')

    await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...")

    if user_accept == "yes":
        new_balance = float(await redis_helper.decode_bytes(
            await redis_helper.redis_get("new_balance")
        ))

        await user_controller.change_balance(callback_query.from_user.id, new_balance)
        await user_controller.add_purchase(callback_query.from_user.id)

        await message.edit_text("‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω</b>\n\n"
                                "<code>–ó–∞ —Ç–æ–≤–∞—Ä–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞</code> @alhimik_tg")
    elif user_accept == "no":
        await message.edit_text("‚ö† <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!</b>")


def register_handlers_goods(dp: Dispatcher):
    dp.register_message_handler(goods, lambda message: message.text and message.text == "ü™® –¢–æ–≤–∞—Ä", state=None)
    dp.register_message_handler(
        good_name_choosing,
        lambda message: message.text,
        state=OrderGoodState.waiting_for_good_name
    )
    dp.register_callback_query_handler(
        accept_payment,
        lambda callback_query: callback_query.data and callback_query.data.startswith("accept_pay")
    )
